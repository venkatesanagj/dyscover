/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.netbeans.tts;

import java.io.Serializable;
import java.util.logging.Logger;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class PronunciationEditorTopComponent extends TopComponent {

    private static PronunciationEditorTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "PronunciationEditorTopComponent";

    private PronunciationEditorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PronunciationEditorTopComponent.class, "CTL_PronunciationEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(PronunciationEditorTopComponent.class, "HINT_PronunciationEditorTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        PronunciationL = new javax.swing.JLabel();
        SynonymusL = new javax.swing.JLabel();
        NewB = new javax.swing.JButton();
        WordL = new javax.swing.JLabel();
        TestB = new javax.swing.JButton();
        WordT = new javax.swing.JTextField();
        CaseSense = new javax.swing.JCheckBox();
        PronunciationT = new javax.swing.JTextField();
        SynT = new javax.swing.JTextField();
        DoneB = new javax.swing.JButton();
        ApplyB = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        PronunciationL.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(PronunciationL, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "LABEL_PRON")); // NOI18N

        SynonymusL.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(SynonymusL, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "LABL_SYN")); // NOI18N

        NewB.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(NewB, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "BUTTON_NEW")); // NOI18N

        WordL.setFont(new java.awt.Font("Monotype Corsiva", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(WordL, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "LABEL_WORD")); // NOI18N

        TestB.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(TestB, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "BUTTON_TEST")); // NOI18N

        CaseSense.setFont(new java.awt.Font("Monotype Corsiva", 1, 15)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(CaseSense, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "Chk_CaseSence")); // NOI18N
        CaseSense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CaseSenseActionPerformed(evt);
            }
        });

        DoneB.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(DoneB, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "BUTTON_DONE")); // NOI18N
        DoneB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneBActionPerformed(evt);
            }
        });

        ApplyB.setFont(new java.awt.Font("Monotype Corsiva", 1, 20)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(ApplyB, org.openide.util.NbBundle.getMessage(PronunciationEditorTopComponent.class, "BUTTON_APPLY")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 593, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PronunciationL)
                            .addComponent(WordL, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SynonymusL))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WordT, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PronunciationT, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SynT, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CaseSense)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DoneB)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(TestB, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(NewB)
                            .addComponent(ApplyB))))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ApplyB, DoneB, NewB, TestB});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WordL)
                                .addGap(30, 30, 30)
                                .addComponent(PronunciationL)
                                .addGap(29, 29, 29)
                                .addComponent(SynonymusL))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WordT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PronunciationT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(SynT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CaseSense)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TestB)
                            .addComponent(NewB))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DoneB)
                            .addComponent(ApplyB))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ApplyB, DoneB, NewB, TestB});

    }// </editor-fold>//GEN-END:initComponents

private void CaseSenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaseSenseActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_CaseSenseActionPerformed

private void DoneBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneBActionPerformed
setVisible(false);
new OpeningPageTopComponent.setVisible(true);
// TODO add your handling code here:
}//GEN-LAST:event_DoneBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyB;
    private javax.swing.JCheckBox CaseSense;
    private javax.swing.JButton DoneB;
    private javax.swing.JButton NewB;
    private javax.swing.JLabel PronunciationL;
    private javax.swing.JTextField PronunciationT;
    private javax.swing.JTextField SynT;
    private javax.swing.JLabel SynonymusL;
    private javax.swing.JButton TestB;
    private javax.swing.JLabel WordL;
    private javax.swing.JTextField WordT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized PronunciationEditorTopComponent getDefault() {
        if (instance == null) {
            instance = new PronunciationEditorTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PronunciationEditorTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PronunciationEditorTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(PronunciationEditorTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PronunciationEditorTopComponent) {
            return (PronunciationEditorTopComponent) win;
        }
        Logger.getLogger(PronunciationEditorTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return PronunciationEditorTopComponent.getDefault();
        }
    }
}
